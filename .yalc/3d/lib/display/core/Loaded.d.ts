import { Group, Mesh, Object3D } from 'three';
import ILoaded from '../../interface/ILoaded';
import Reresolvable from './utils/Reresolvable';
import { Cancellable } from '@lincode/promiselikes';
import MeshItem from './MeshItem';
import { Point3d } from '@lincode/math';
import VisibleObjectManager from './VisibleObjectManager';
export default abstract class Loaded<T = Object3D> extends VisibleObjectManager<Mesh> implements ILoaded {
    loadedGroup: Group;
    constructor(unmounted?: boolean);
    loaded: Reresolvable<Object3D<import("three").Event>>;
    protected abstract load(src: string): Promise<T>;
    protected abstract resolveLoaded(data: T, src: string): Group;
    protected _src?: string;
    get src(): string | undefined;
    set src(val: string | undefined);
    private _onLoad?;
    get onLoad(): (() => void) | undefined;
    set onLoad(cb: (() => void) | undefined);
    protected widthSet?: boolean;
    get width(): number;
    set width(val: number);
    protected heightSet?: boolean;
    get height(): number;
    set height(val: number);
    protected depthSet?: boolean;
    get depth(): number;
    set depth(val: number);
    get innerRotationX(): number;
    set innerRotationX(val: number);
    get innerRotationY(): number;
    set innerRotationY(val: number);
    get innerRotationZ(): number;
    set innerRotationZ(val: number);
    get innerX(): number;
    set innerX(val: number);
    get innerY(): number;
    set innerY(val: number);
    get firstInnerY(): any;
    get playAllAnimation(): any;
    set playAllAnimation(val: any);
    set firstInnerY(val: any);
    get firstInnerZ(): any;
    set firstInnerZ(val: any);
    get firstInnerX(): any;
    set firstInnerX(val: any);
    get innerZ(): number;
    set innerZ(val: number);
    get innerVisible(): boolean;
    set innerVisible(val: boolean);
    get frustumCulled(): boolean;
    set frustumCulled(val: boolean);
    get castShadow(): boolean;
    set castShadow(val: boolean);
    get receiveShadow(): boolean;
    set receiveShadow(val: boolean);
    protected _boxVisible?: boolean;
    get boxVisible(): boolean;
    set boxVisible(val: boolean);
    get outline(): boolean;
    set outline(val: boolean);
    get bloom(): boolean;
    set bloom(val: boolean);
    private managerSet?;
    protected addToRaycastSet(set: Set<Object3D>): Cancellable;
    placeAt(object: MeshItem | Point3d | string): void;
    protected refreshPhysics(): void;
}
export declare const getLoadedObject: (item: Loaded | MeshItem) => Object3D<import("three").Event> | Group;
