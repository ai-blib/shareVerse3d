import { Object3D, Vector3 } from "three";
import { Point3d } from "@lincode/math";
import SimpleObjectManager from "../SimpleObjectManager";
import IPhysicsObjectManager, { PhysicsOptions } from "../../../interface/IPhysicsObjectManager";
import StaticObjectManager from "../StaticObjectManager";
import MeshItem from "../MeshItem";
import PhysicsUpdate from "./PhysicsUpdate";
export default class PhysicsObjectManager<T extends Object3D = Object3D> extends SimpleObjectManager<T> implements IPhysicsObjectManager {
    get velocity(): Point3d;
    set velocity(val: Point3d);
    protected positionUpdate?: PhysicsUpdate;
    protected rotationUpdate?: PhysicsUpdate;
    private refreshPhysicsState?;
    protected refreshPhysics(): void;
    protected bvhVelocity?: Vector3;
    protected bvhOnGround?: boolean;
    protected bvhRadius?: number;
    protected bvhHalfHeight?: number;
    protected bvhMap?: boolean;
    protected bvhCharacter?: boolean;
    protected _physics?: PhysicsOptions;
    get physics(): PhysicsOptions;
    set physics(val: PhysicsOptions);
    protected _gravity?: boolean;
    get gravity(): boolean;
    set gravity(val: boolean);
    intersects(target: StaticObjectManager): boolean;
    get x(): number;
    set x(val: number);
    get y(): number;
    set y(val: number);
    get z(): number;
    set z(val: number);
    get rotationX(): number;
    set rotationX(val: number);
    get rotationY(): number;
    set rotationY(val: number);
    get rotationZ(): number;
    set rotationZ(val: number);
    lookAt(target: MeshItem | Point3d): void;
    lookAt(x: number, y: number | undefined, z: number): void;
    placeAt(object: MeshItem | Point3d | string): void;
    lerpTo(x: number, y: number, z: number, alpha: number): void;
    stopMove(): void;
    stopKeyboardMove(): void;
    moveTo(x: number, y: number | undefined, z: number, speed: number): void;
}
