export default class MeshReflectorMaterial extends MeshStandardMaterial {
    constructor(renderer: any, camera: any, scene: any, object: any, { mixBlur, mixStrength, resolution, blur, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, mirror, distortion, mixContrast, distortionMap, reflectorOffset, planeNormal }?: {
        mixBlur?: number | undefined;
        mixStrength?: number | undefined;
        resolution?: number | undefined;
        blur?: number[] | undefined;
        minDepthThreshold?: number | undefined;
        maxDepthThreshold?: number | undefined;
        depthScale?: number | undefined;
        depthToBlurRatioBias?: number | undefined;
        mirror?: number | undefined;
        distortion?: number | undefined;
        mixContrast?: number | undefined;
        distortionMap: any;
        reflectorOffset?: number | undefined;
        planeNormal?: Vector3 | undefined;
    });
    gl: any;
    camera: any;
    scene: any;
    parent: any;
    hasBlur: boolean;
    reflectorPlane: Plane;
    normal: Vector3;
    reflectorWorldPosition: Vector3;
    cameraWorldPosition: Vector3;
    rotationMatrix: Matrix4;
    lookAtPosition: Vector3;
    clipPlane: Vector4;
    view: Vector3;
    target: Vector3;
    q: Vector4;
    textureMatrix: Matrix4;
    virtualCamera: PerspectiveCamera;
    reflectorOffset: number;
    planeNormal: Vector3;
    reflectorProps: {
        mirror: number;
        textureMatrix: Matrix4;
        mixBlur: number;
        tDiffuse: import("three").Texture;
        tDepth: DepthTexture;
        tDiffuseBlur: import("three").Texture;
        hasBlur: boolean;
        mixStrength: number;
        minDepthThreshold: number;
        maxDepthThreshold: number;
        depthScale: number;
        depthToBlurRatioBias: number;
        distortion: number;
        distortionMap: any;
        mixContrast: number;
        "defines-USE_BLUR": string | undefined;
        "defines-USE_DEPTH": string | undefined;
        "defines-USE_DISTORTION": string | undefined;
    };
    setupBuffers(resolution: any, blur: any): void;
    fbo1: WebGLRenderTarget | undefined;
    fbo2: WebGLRenderTarget | undefined;
    kawaseBlurPass: KawaseBlurPass | undefined;
    beforeRender(): void;
    update(): void;
    onBeforeCompile(shader: any, ...args: any[]): void;
}
import { MeshStandardMaterial } from "three/src/materials/MeshStandardMaterial";
import { Plane } from "three/src/math/Plane";
import { Vector3 } from "three/src/math/Vector3";
import { Matrix4 } from "three/src/math/Matrix4";
import { Vector4 } from "three/src/math/Vector4";
import { PerspectiveCamera } from "three/src/cameras/PerspectiveCamera";
import { DepthTexture } from "three/src/textures/DepthTexture";
import { WebGLRenderTarget } from "three/src/renderers/WebGLRenderTarget";
import { KawaseBlurPass } from "postprocessing";
